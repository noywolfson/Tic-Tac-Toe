[{"C:\\Users\\Noy Wolfson\\Dev\\tic-tac-toe\\src\\index.js":"1"},{"size":3996,"mtime":1610558269437,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"tkph8l","C:\\Users\\Noy Wolfson\\Dev\\tic-tac-toe\\src\\index.js",["7","8"],"import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n      return (\r\n        <button \r\n            className=\"square\" \r\n            onClick={props.onClick}\r\n        >\r\n          {props.value}\r\n        </button>\r\n      );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n          <Square \r\n              value={this.props.squares[i]} \r\n              onClick={()=>this.props.onClick(i)}\r\n          />\r\n          );\r\n      }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  class Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null), \r\n            }],\r\n            currentPlayer : 'X',\r\n            stepNumber : 0\r\n        };\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber+1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.currentPlayer;\r\n        this.switchPlayer(this.state.stepNumber+1)\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            stepNumber : this.state.stepNumber+1\r\n        });\r\n    }\r\n\r\n    switchPlayer(move){\r\n        if(move % 2 == 0){\r\n            this.setState({currentPlayer:'X'})\r\n        } else{\r\n            this.setState({currentPlayer:'O'})\r\n        }\r\n    }\r\n\r\n    jumpTo(move){\r\n        this.switchPlayer(move);\r\n        this.setState({stepNumber : move});\r\n    }   \r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to start';\r\n            return(\r\n                <li key={move}>\r\n                    <button onClick={()=>this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        let status;\r\n        if(winner){\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + this.state.currentPlayer;\r\n        }\r\n        \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n                squares={current.squares} \r\n                onClick={(i)=>this.handleClick(i)}\r\n                currentPlayer={this.state.currentPlayer}\r\n                />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );",{"ruleId":"9","severity":1,"message":"10","line":1,"column":17,"nodeType":"11","messageId":"12","endLine":1,"endColumn":25},{"ruleId":"13","severity":1,"message":"14","line":80,"column":21,"nodeType":"15","messageId":"16","endLine":80,"endColumn":23},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]